### YamlMime:YamlDocument
documentType: Tutorial
title: Create a Spring Boot App in Azure
metadata:
  title: Create a Spring Boot App in Azure
  description: Create a Srping Boot backend application with a JavaScript SPA with Azure Storage, Key Vault, and Active Directory.
  audience: Developer
  level: Intermediate
  nextTutorialHref: http://www.bing.com
  nextTutorialTitle: Set up Jenkins CI/CD to Azure
  displayType: two-column
  interactive: azurecli
items:
- durationInMinutes: 5
  content: |
    This tutorial walks you through developing and deploying a Spring Boot todo list application with an Angular.js front-end.
    The application stores its data in the [Cosmos DB NoSQL database](), uses [Azure Active Directory]() for enterprise security,
    and [Azure Key Vault]() for secret management. The tutorial will first deploy the applications to [Azure Web App for Containers](), and then
    show you the steps for deploying to [Azure Kuberenetes Service]().

    This tutorial uses the [Azure CLI]() to create and configure the Azure resources needed by the application.
    You can use the second column of this tutorial to run the CLI commands in the browser through the [Azure Cloud Shell]().

- title: Set up your environment
  durationInMinutes: 3
  content: |
    Before you begin, you'll need the following installed on your development machine:

    * [JDK](https://www.azul.com/downloads/zulu/) 1.8 and above
    * [Maven](https://maven.apache.org/) 3.0 and above

    Clone the [sample repo repository](https://github.com/Microsoft/todo-app-java-on-azure) and open the project folder in your
    favorite IDE or code editor. During the tutorial you'll be asked to edit the code in your local copy of the 
    project.

    [Create a new Azure resource group]() to manage the resources created in this tutorial.

    ```azurecli
    az group create -n mySpringBootResourceGroup -l westus
    ```

- title: Store your data with Cosmos DB
  durationInMinutes: 5
  content: |
    In this step, you'll create an [Azure Cosmos DB]() instance and configure it to use the [Document DB API]() . You'll
    then configure the Spring Boot project with connection information and credentials to use the database.

    Create the Cosmos DB instance, noting the `documentEndpoint` field in the response:
    ```azurecli
    az cosmosdb create --kind GlobalDocumentDB -g mySpringBootResourceGroup -n your-unique-db-name
    ```

    When the database is ready to use, you'll see confirmation in the output that the provisioning of the database was successful along with the HTTPS endpoint you'll 
    configure the sample app to use.

    ```json
    "kind": "GlobalDocumentDB",
    "location": "West US",
    "name": "your-unique-db-name",
    "provisioningState": "Succeeded",
    "readLocations": [
       {
         "documentEndpoint": "https://your-unique-db-name-westus.documents.azure.com:443/",
         "failoverPriority": 0,
         "id": "your-unique-db-name-westus",
         "locationName": "West US",
         "provisioningState": "Succeeded"
       }
    ],
    ```


    Retrieve the primary master Cosmos DB access key to allow the sample to read and write to the database.
    ```azurecli
    az cosmosdb list-keys -g mySpringBootResourceGroup -n your-unique-db-name
    ```

    In your local project, configure your application to connect to Cosmos DB. Open `src/main/resources/application.properties`
    and add the following properties:

    ```
    azure.documentdb.uri=https://your-unique-db-name.documents.azure.com:443/
    azure.documentdb.key=put-your-primary-master-key-here
    azure.documentdb.database=your-unique-db-name
    ```

- title: Run the sample locally 
  durationInMinutes: 4
  content: |
    From your local project directory, build the sample with Maven:

    ```
    mvn package
    ```

    Run the project with:
    ```
    java -jar target/todo-app-java-on-azure-1.0-SNAPSHOT.jar
    ```

    Browse to the sample on http://localhost:8080 once the app is started to use the sample application.
    
    ![Sample app running locally](media/spring-boot-tutorial/todo-list-app.png)

    Changes made to the todo list will be saved to your Cosmos DB instance.

- title: Deploy to Azure App Service
  durationInMinutes: 10
  content: |
    In this step, you'll package the sample as a  Docker container, push the image to Azure Container Registry, and then 
    deploy the image Azure App Service for Containers.

    Create the Azure Container Registry:  

    ```azurecli
    az acr create -n my-unique-registry-name -g mySpringBootResourceGroup --sku Basic --admin-enabled
    ```
    A new Azure storage account will be created in the resource group to manage storage for your container images. When the registry is ready, you see the provisioning state 
    as `Succeeded` in the CLI output

    ```json
    "location": "westus",
    "loginServer": "my-unique-registry-name.azurecr.io",
    "name": "my-unique-registry-name",
    "provisioningState": "Succeeded",
    "resourceGroup": "mySpringBootResourceGroup",
    ```

    Retrieve the username and  password to your container registry. You'll need them to configure Maven in the next step.

    ```azurecli
    az acr credential show -n my-unique-registry-name
    ```

    You'll see two passwords and a username in the output:

    Configure Maven to deploy to Azure App Service:
    In the Maven settings file `~/.m2/settings.xml`, add a new <server> element with your Azure Container Registry credentials from previous steps.

    ```XML
    <server>
      <id>my-unique-registry-name.azurecr.io</id>
      <username>my-unique-registry-name</username>
      <password>secure-password</password>
      <configuration>
        <email>frank@fabrikam.com</email>
      </configuration>
     </server>
     ```

     Open the project's `pom.xml` and replace the value for `docker.image.prefix` with your Azure Container Registry URL:

     ```<docker.image.prefix>https://my-unique-registry-name.azurecr.io</docker.image.prefix>```

     Build and push the container image to the registry:

     ```
     mvn clean package docker:build docker:push
     ```

     Deploy the pushed image to Azure App Service for Containers: 
     ```
     mvn azure-webapp:deploy
     ```

     Open the application once it's finished deploying in your web browser. You'll note that the todo list items added when you
     ran the app locally appear since both application instances use the same Cosmos DB database.
- href: Next Steps
  content: |
    TODO