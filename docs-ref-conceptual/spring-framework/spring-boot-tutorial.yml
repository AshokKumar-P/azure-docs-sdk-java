### YamlMime:YamlDocument
documentType: Tutorial
title: Create a Spring Boot App in Azure
metadata:
  title: Create a Spring Boot App in Azure
  description: Create and deploy a Todo Spring Boot app to Azure using Cosmos DB, containers and Kubernetes.
  audience: Developer
  level: Intermediate
  nextTutorialHref: https://docs.microsoft.com/azure/jenkins/java-deploy-webapp-tutorial
  nextTutorialTitle: Set up Jenkins CI/CD to Azure
  displayType: one-column
items:
- durationInMinutes: 5
  content: |
    This tutorial walks you through developing and deploying a Spring Boot todo list application with an Angular.js front-end.
    The application stores its data in the [Cosmos DB document database](/azure/cosmos-db/create-documentdb-java). 
    The tutorial first deploys the application to [Azure Web App for Containers](/azure/app-service/app-service-web-get-started-java), and then  to [Azure Kuberenetes Service](/java/azure/spring-framework/deploy-spring-boot-java-app-on-kubernetes).

    This tutorial uses the [Azure CLI](/cli/azure/overview) to create and configure the Azure resources needed by the application.
    You can run the CLI commands in the browser through the [Azure Cloud Shell](/azure/cloud-shell/overview).
- title: Set up your environment
  durationInMinutes: 3
  content: |
    Before you begin, you'll need the following installed on your development machine:

    * [JDK](https://www.azul.com/downloads/zulu/) 1.8 and above
    * [Maven](https://maven.apache.org/) 3.0 and above

    Clone the [sample repo repository](https://github.com/Microsoft/todo-app-java-on-azure) 

    ```
    git clone https://github.com/Microsoft/todo-app-java-on-azure
    ```

    During the tutorial you'll be asked to edit the code in your local copy of the 
    project, so go ahead and open the project folder in your favorite IDE or code editor.

    [Create a new Azure resource group](/cli/azure/group?view=azure-cli-latest#az_group_create) to manage the resources created in this tutorial.

    ```azurecli-interactive
    az group create -n mySpringBootResourceGroup -l westus2
    ```
- title: Store your data with Cosmos DB
  durationInMinutes: 5
  content: |
    In this step, you'll create an Azure Cosmos DB database and access it using the [Document DB API](/azure/cosmos-db/documentdb-introduction) . You'll
    then configure the Spring Boot project with connection information and credentials to use the database.

    Create the Cosmos DB instance, noting the `documentEndpoint` field in the response:

    ```azurecli-interactive
    az cosmosdb create --kind GlobalDocumentDB -g mySpringBootResourceGroup -n your-unique-db-name
    ```

    When the database is ready to use, you'll see confirmation in the output that the provisioning of the database was successful along with the HTTPS endpoint you'll 
    configure the sample app to use.

    ```json
    "kind": "GlobalDocumentDB",
    "location": "West US 2",
    "name": "your-unique-db-name",
    "provisioningState": "Succeeded",
    "readLocations": [
       {
         "documentEndpoint": "https://your-unique-db-name-westus.documents.azure.com:443/",
         "failoverPriority": 0,
         "id": "your-unique-db-name-westus",
         "locationName": "West US 2",
         "provisioningState": "Succeeded"
       }
    ],
    ```

    Retrieve the primary master Cosmos DB access key to allow the sample to read and write to the database.
    ```azurecli-interactive
    az cosmosdb list-keys -g mySpringBootResourceGroup -n your-unique-db-name
    ```

    Configure your application to connect to Cosmos DB. Open `src/main/resources/application.properties` and add the following properties:

    ```
    azure.documentdb.uri=https://your-unique-db-name.documents.azure.com:443/
    azure.documentdb.key=put-your-primary-master-key-here
    azure.documentdb.database=your-unique-db-name
    ```
- title: Run the sample locally 
  durationInMinutes: 4
  content: |
    From your local project directory, build the sample with Maven:

    ```
    mvn package
    ```

    Run the project with:
    ```
    java -jar target/todo-app-java-on-azure-1.0-SNAPSHOT.jar
    ```

    Browse to the sample on http://localhost:8080 once the app is started to use the sample application.
    
    ![Sample app running locally](media/spring-boot-tutorial/todo-list-app.png)

    Add a couple of todo entries using the running app in your browser. These entries will be stored in Cosmos DB in the cloud.
- title: Deploy to Azure App Service
  durationInMinutes: 10
  content: |
    In this step, you'll package the sample as a Docker container, push the image to Azure Container Registry, and then 
    deploy the image on Azure App Service for Containers.

    Create the Azure Container Registry:  

    ```azurecli-interactive
    az acr create -n my-unique-registry-name -g mySpringBootResourceGroup --sku Basic --admin-enabled
    ```
    A new Azure storage account will be created in the resource group to manage storage for your container images. When the registry is ready, you see the provisioning state 
    as `Succeeded` in the CLI output

    ```json
    "location": "westus",
    "loginServer": "my-unique-registry-name.azurecr.io",
    "name": "my-unique-registry-name",
    "provisioningState": "Succeeded",
    "resourceGroup": "mySpringBootResourceGroup",
    ```

    Retrieve the username and  password to your container registry. You'll need them to configure Maven in the next step.

    ```azurecli-interactive
    az acr credential show -n my-unique-registry-name
    ```

    You'll see two passwords and a username in the output:

    Configure Maven to deploy to Azure App Service:
    In the Maven settings file `~/.m2/settings.xml`, add a new <server> element with your Azure Container Registry credentials from previous steps.

    ```XML
    <server>
      <id>my-unique-registry-name.azurecr.io</id>
      <username>my-unique-registry-name</username>
      <password>secure-password</password>
      <configuration>
        <email>frank@fabrikam.com</email>
      </configuration>
    </server>
    ```

    Open the project's `pom.xml` and replace the value for `docker.image.prefix` with your Azure Container Registry URL:

    ```
    <docker.image.prefix>https://my-unique-registry-name.azurecr.io</docker.image.prefix>
    ```

     Build and push the container image to the registry:

     ```
     mvn clean package docker:build docker:push
     ```

     Deploy the pushed image to Azure App Service for Containers: 
     ```
     mvn azure-webapp:deploy
     ```

     Open the application once it's finished deploying in your web browser. You'll note that the todo list items added when you
     ran the app locally show up since the app is using the same Cosmos DB database.
- title: Deploy to Kubernetes
  durationInMinutes: 4
  content: |
    In the previous step you deployed the application to Azure Web App for Containers. In this step you'll deploy the application to Azure Kubernetes Service and manage your deployment using
    kubectl and the Kubernetes web interface.
 
    Create a Kuberenetes cluster with one node using the Azure CLI.

    ```azurecli-interactive
    az aks create --resource-group mySpringBootResourceGroup --name myTodoCluster --node-count 1 --generate-ssh-keys
    ```
  
    Install the kubectl command-line client using the Azure CLI. If you're using the Cloud Shell, it's already installed and you can skip this step.
    ```azurecli-interactive
    az aks install-cli
    ```

    Download the credentials and configure kubectl to connect to your new cluster.
    ```azurecli-interactive
    az aks get-credentials --resource-group mySpringBootResourceGroup --name myTodoCluster
    ```

    Copy the Kubernetes resource yaml file fragments for use by the project's Fabric8 Maven plugin configuration. 

    ```bash
    mkdir src/main/fabric8
    cp doc/resources/fabric8/*.yml src/main/fabric8
    ```

    Now deploy the image to AKS
    ```
    mvn fabric8:resource fabric8:apply
    ```

    Get the external IP address from kubectl. This may take a few minutes to wait the deploy success. Before finishing, the `external-ip` field should show `pending`.

    ```bash
    kubectl get svc -w
    ```
    
    Open the url you obtained in last step in your browser, you will find the todo app has been deployed to your Kubernetes cluster. 
- title: Deploy to Kubernetes
  content: |
    Learn more about developing Spring apps on Azure at [Spring on Azure](https://docs.microsoft/com/java/azure/spring-framework).